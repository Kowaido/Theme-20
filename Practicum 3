{
    /// <summary>
    /// Общённый класс Point
    /// </summary>
    /// <typeparam name="T"></typeparam>
    class Point<T>
    {
        /// <summary>
        /// Поле x
        /// </summary>
        private T x;

        /// <summary>
        /// Поле y
        /// </summary>
        private T y;

        /// <summary>
        /// Конструктор без параметров
        /// </summary>
        public Point()
        {

        }

        /// <summary>
        /// Конструктор с двумя параметрами
        /// </summary>
        /// <param name="x"></param>
        /// <param name="y"></param>
        public Point(T x, T y)
        {
            this.x = x;
            this.y = y;
        }

        /// <summary>
        /// Свойство X
        /// </summary>
        public T X
        {
            get { return x; }
            set { x = value; }
        }

        /// <summary>
        /// Свойство Y
        /// </summary>
        public T Y
        {
            get { return y; }
            set { y = value; }
        }

        /// <summary>
        /// Метод для вывода информации по точкам
        /// </summary>
        public void Info()
        {
            Console.WriteLine($"Точка x: {X}, Точка y: {Y}");
        }
    }
}

{
    /// <summary>
    /// Обобщённый класс Triagle
    /// </summary>
    /// <typeparam name="T"></typeparam>
    class Triagle<T>
    {
        /// <summary>
        /// Поле a
        /// </summary>
        private T a;

        /// <summary>
        /// Поле b
        /// </summary>
        private T b;

        /// <summary>
        /// Поле c
        /// </summary>
        private T c;

        /// <summary>
        /// Свойство A
        /// </summary>
        public T A
        {
            get { return a; }
            set { value = a; }
        }

        /// <summary>
        /// Свойство B
        /// </summary>
        public T B
        {
            get { return b; }
            set { value = b; }
        }

        /// <summary>
        /// Свойство C
        /// </summary>
        public T C
        {
            get { return c; }
            set { value = c; }
        }

        /// <summary>
        /// Конструктор без параметров
        /// </summary>
        public Triagle()
        {

        }

        /// <summary>
        /// Конструктор с тремя параметрами
        /// </summary>
        /// <param name="a"></param>
        /// <param name="b"></param>
        /// <param name="c"></param>
        public Triagle(T a, T b, T c)
        {
            if ((dynamic)A<(dynamic)B+(dynamic)C && (dynamic)B<(dynamic)A+(dynamic)C && (dynamic)C<(dynamic)A+(dynamic)B)
            {
                A = a;
                B = b;
                C = c;
            }

            else
            {
                Console.WriteLine("Треугольник не существует");
            }
        }

        /// <summary>
        /// Метод для вывода информации по треугольнику
        /// </summary>
        public void PrintInfo()
        {
            Console.WriteLine($"Треугольник со сторонами: A-{A}\nB-{B}\nC-{C}");
        }

        /// <summary>
        /// Метод для площади треугольника
        /// </summary>
        /// <returns></returns>
        public double Area()
        {
            dynamic a1 = A;
            dynamic b1 = B;
            dynamic c1 = C;
            if (a1 == 0 && b1 == 0 && c1 == 0)
            {
                Console.WriteLine("Треугольник не существует");
                return 0;
            }

            else
            {
                dynamic p = (double)(a1 + b1 + c1) / 2;
                return Math.Sqrt((dynamic)p * ((dynamic)p - a1) * ((dynamic)p - b1) * ((dynamic)p - c1));
            }
        }
    }
}

{
    /// <summary>
    /// Класс Segment, c универсальным параметром
    /// </summary>
    /// <typeparam name="T">Универсальный параметр</typeparam>
    class Segment<T> where T: struct, IComparable<T>, IConvertible 
    {
        /// <summary>
        /// Поле x1
        /// </summary>
        private T x1;

        /// <summary>
        /// Поле x2
        /// </summary>
        private T x2;
        
        /// <summary>
        /// Поле y1
        /// </summary>
        private T y1;

        /// <summary>
        /// Поле y2
        /// </summary>
        private T y2;

        /// <summary>
        /// Свойство X1
        /// </summary>
        public T X1 { get {return x1; } set {x1 = value; } }

        /// <summary>
        /// Свойство X2
        /// </summary>
        public T X2 { get {return x2; } set {x2 = value; } }

        /// <summary>
        /// Свойство Y1
        /// </summary>
        public T Y1 { get {return y1; } set {y1 = value; } }

        /// <summary>
        /// Свойство Y2
        /// </summary>
        public T Y2 { get {return y2; } set {y2 = value; } }

        /// <summary>
        /// Конструктор без параметров
        /// </summary>
        public Segment()
        {

        }

        /// <summary>
        /// Конструктор с четырьмя параметрами
        /// </summary>
        /// <param name="x1">x1</param>
        /// <param name="x2">x2</param>
        /// <param name="y1">y1</param>
        /// <param name="y2">y2</param>
        public Segment(T x1, T x2, T y1, T y2)
        {
            this.x1 = x1;
            this.x2 = x2;
            this.y1 = y1;
            this.y2 = y2;
        }

        /// <summary>
        /// Метод для вывода информации об отрезке
        /// </summary>
        public void InfoSegment()
        {
            Console.WriteLine($"Отрезок с координатами с заданых точек: ({X1}, {Y1}) и ({X2}, {Y2})");
        }

        /// <summary>
        /// Метод для длины отрезка
        /// </summary>
        /// <returns>длину отрезка</returns>
        public double Length()
        {
            dynamic A = Convert.ToDouble(x2)-Convert.ToDouble(x1);
            dynamic B = Convert.ToDouble(y2)-Convert.ToDouble(y1);
            return Math.Sqrt(A * A + B * B);
        }
    }
}

{
    class Program
    {
        static void Main(string[] args)
        {
            //1-Задание
            Point<int> point = new Point<int>(1,0);
            point.Info();
            Point<uint> point1 = new Point<uint>(3u,5u);
            point1.Info();
            Point<double> point2 = new Point<double>(5.2,12);
            point2.Info();

            //2-Задание
            Triagle<int> triagle = new Triagle<int>(2, 3, 4);
            triagle.PrintInfo();
            Console.WriteLine($"Площадь: {triagle.Area()}");
            Triagle<uint> triagle1 = new Triagle<uint>(3u, 2u, 5u);
            triagle1.PrintInfo();
            Console.WriteLine($"Площадь: {triagle1.Area()}");
            Triagle<double> triagle2 = new Triagle<double>(3.1, 5, 4.2);
            triagle2.PrintInfo();
            Console.WriteLine($"Площадь: {triagle2.Area()}");

            //3-Задание
            Segment<int> segmentint = new Segment<int>(1, 2, 4, 6);
            segmentint.InfoSegment();
            Console.WriteLine($"Длина отрезка: {segmentint.Length()}");

            Segment<long> segmentlong = new Segment<long>(1000000, 2220000000, 30000000, 4000000);
            segmentlong.InfoSegment();
            Console.WriteLine($"Длина отрезка: {segmentlong.Length()}");

            Segment<double> segmentdouble = new Segment<double>(1.2, 2.4, 4.6, 5.1);
            segmentdouble.InfoSegment();
            Console.WriteLine($"Длина отрезка: {segmentdouble.Length()}");
            
            Console.ReadKey();
        }
    }
}
